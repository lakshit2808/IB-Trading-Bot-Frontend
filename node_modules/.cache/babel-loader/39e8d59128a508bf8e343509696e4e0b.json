{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lakshit\\\\Desktop\\\\Bots\\\\C - Bot\\\\ib_frontend\\\\src\\\\components\\\\botlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Popup from './popupmodal/popup';\nimport axios from 'axios';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BotList = () => {\n  _s();\n\n  const [modal, setModal] = useState(false);\n  const [botList, setBotList] = useState([]);\n\n  const deleteBotHandler = (index, ticker) => {\n    const encoded = encodeURI(`https://tradingviewsignal.herokuapp.com/v1/bot1/userinput?ticker=${ticker}`);\n    let tempList = botList;\n    botList.splice(index, 1);\n    setBotList(tempList);\n    axios.delete(encoded).then(res => {\n      window.location.reload();\n      console.log(res.data);\n    });\n  };\n\n  useEffect(() => {\n    axios.get('https://tradingviewsignal.herokuapp.com/v1/bot1/userinput').then(res => {\n      setBotList(res.data);\n    });\n  }, []);\n\n  const addBotHandler = botData => {\n    axios.post('https://tradingviewsignal.herokuapp.com/v1/bot1/userinput', {\n      'ticker': botData.ticker,\n      'StopLoss': botData.StopLoss,\n      'TakeProfit': botData.TakeProfit,\n      'AmountToBeInvested': botData.AmountToBeInvested\n    }).then(res => console.log(res));\n  };\n\n  const updateBotHandler = ticker => {\n    axios.put('https://example.com/cats/1', {\n      ticker: Object.ticker,\n      StopLoss: Object.StopLoss,\n      TakeProfit: Object.TakeProfit,\n      AmountToBeInvested: Object.AmountToBeInvested\n    }).then(response => {\n      console.log(response);\n    }).catch(error => {\n      console.log(err);\n    });\n    axios.patch(`https://tradingviewsignal.herokuapp.com/v1/bot1/userinput?ticker=${ticker}`, {\n      ticker: Object.ticker,\n      StopLoss: Object.StopLoss,\n      TakeProfit: Object.TakeProfit,\n      AmountToBeInvested: Object.AmountToBeInvested\n    }).then(response => {\n      console.log(response);\n    });\n  };\n\n  const toggle = () => {\n    setModal(!modal);\n  };\n\n  const saveBot = botObj => {\n    let tempList = botList;\n    tempList.push(botObj);\n    console.log(botObj);\n    addBotHandler(botObj);\n    setBotList(botList);\n    setModal(false);\n  };\n\n  const updateListArray = (obj, index) => {\n    let tempList = botList;\n    tempList[index] = obj;\n    setBotList(tempList);\n    updateBotHandler(obj.ticker); // window.location.reload()\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Interactive Broker's Trading Bots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-2\",\n        onClick: () => setModal(true),\n        children: \"Create Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-container\",\n      children: botList && botList.map((obj, index) => /*#__PURE__*/_jsxDEV(Card, {\n        Object: obj,\n        index: index,\n        deleteBot: deleteBotHandler,\n        updateListArray: updateListArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 48\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      modal: modal,\n      toggle: toggle,\n      save: saveBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BotList, \"RaaqJZqdpNmOsdQlLKaGAnPrYtk=\");\n\n_c = BotList;\nexport default BotList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotList\");","map":{"version":3,"sources":["C:/Users/Lakshit/Desktop/Bots/C - Bot/ib_frontend/src/components/botlist.js"],"names":["React","useState","useEffect","Popup","axios","Card","BotList","modal","setModal","botList","setBotList","deleteBotHandler","index","ticker","encoded","encodeURI","tempList","splice","delete","then","res","window","location","reload","console","log","data","get","addBotHandler","botData","post","StopLoss","TakeProfit","AmountToBeInvested","updateBotHandler","put","Object","response","catch","error","err","patch","toggle","saveBot","botObj","push","updateListArray","obj","map"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Popup from './popupmodal/popup';\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\n\r\nconst BotList = () => {\r\n  const [modal, setModal] = useState(false);\r\n  const [botList, setBotList] = useState([])\r\n\r\n  const deleteBotHandler = (index,ticker) => {\r\n    const encoded = encodeURI(`https://tradingviewsignal.herokuapp.com/v1/bot1/userinput?ticker=${ticker}`);\r\n    let tempList = botList\r\n    botList.splice(index, 1)\r\n    setBotList(tempList)\r\n    axios.delete(encoded)\r\n         .then(res => {\r\n            window.location.reload()\r\n            console.log(res.data) \r\n          });\r\n  };\r\n\r\n  useEffect(() =>{\r\n    axios.get('https://tradingviewsignal.herokuapp.com/v1/bot1/userinput')\r\n    .then(res => {\r\n      setBotList(res.data);\r\n    })\r\n  },[])\r\n\r\n\r\n  const addBotHandler = (botData) => {\r\n    axios.post('https://tradingviewsignal.herokuapp.com/v1/bot1/userinput', {\r\n      'ticker': botData.ticker, 'StopLoss': botData.StopLoss, 'TakeProfit': botData.TakeProfit, 'AmountToBeInvested': botData.AmountToBeInvested})\r\n      .then(res => console.log(res))\r\n  };\r\n  const updateBotHandler = (ticker) => {\r\n\r\n      axios.put('https://example.com/cats/1', {\r\n        ticker: Object.ticker, StopLoss: Object.StopLoss, TakeProfit: Object.TakeProfit, AmountToBeInvested: Object.AmountToBeInvested\r\n      })\r\n      .then(response => {\r\n        console.log(response);\r\n      })\r\n      .catch(error => {\r\n        console.log(err);\r\n      });\r\n\r\n    axios.patch(`https://tradingviewsignal.herokuapp.com/v1/bot1/userinput?ticker=${ticker}`, {\r\n        ticker: Object.ticker, StopLoss: Object.StopLoss, TakeProfit: Object.TakeProfit, AmountToBeInvested: Object.AmountToBeInvested\r\n      })\r\n      .then(response => {\r\n        console.log(response);\r\n      })\r\n    }\r\n\r\n\r\n  const toggle = () => {\r\n    setModal(!modal);\r\n  }\r\n\r\n  const saveBot = (botObj) => {\r\n    let tempList = botList\r\n    tempList.push(botObj)\r\n    console.log(botObj)\r\n    addBotHandler(botObj)\r\n    setBotList(botList)\r\n    setModal(false)\r\n  }\r\n\r\n  const updateListArray = (obj, index) => {\r\n    let tempList = botList\r\n    tempList[index] = obj\r\n    setBotList(tempList)\r\n    updateBotHandler(obj.ticker)\r\n    // window.location.reload()\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className='header text-center'>\r\n      <h2>Interactive Broker's Trading Bots</h2>\r\n      <button className='btn btn-primary mt-2'  onClick = {() => setModal(true)}>Create Bot</button>\r\n    </div>\r\n\r\n    <div className='task-container'>\r\n      {botList && botList.map((obj , index) => <Card Object = {obj} index = {index} deleteBot= {deleteBotHandler} updateListArray = {updateListArray} />)}\r\n    </div>\r\n    <Popup modal = {modal} toggle = {toggle} save = {saveBot}></Popup>\r\n\r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nexport default BotList"]},"metadata":{},"sourceType":"module"}